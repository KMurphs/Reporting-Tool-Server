pipeline {
    agent any
    parameters {
        string(name: 'TAG', defaultValue: 'latest', description: '')
        string(name: 'APP_NAME', defaultValue: 'reporting-mysql', description: '')
        string(name: 'REGISTRY_HOST', defaultValue: 'cloud.canister.io:5000', description: '')
    }
    environment {
        REGISTRY_CREDS = credentials('canister-credentials')
        TEST_CONTAINER_NAME = "mysql_temp"
        TEST_PASSSWORD = "TestPassword!"

        //IMAGE_NAME = ${params.REGISTRY_HOST}/$REGISTRY_CREDS_USR/${params.APP_NAME}:${params.TAG}
    }
    stages {
        stage('Build') { 
            steps {
                sh 'echo "Building the Custom MYSQL Image"'
                sh 'docker build -t ${params.REGISTRY_HOST}/$REGISTRY_CREDS_USR/${params.APP_NAME}:${params.TAG} -f k8s_applications/mysql/mysql-image/Dockerfile k8s_applications/mysql/mysql-image/'
                // sh 'echo "Registry user name is $REGISTRY_CREDS_USR"'
                // sh 'echo "Registry user password is $REGISTRY_CREDS_PSW"'
                // //sh 'echo "Image name is $IMAGE_NAME"'
                // echo "The Registry host is ${params.REGISTRY_HOST}"
                // echo "The app name is ${params.APP_NAME}"
                // echo "The tag is ${params.TAG}"
            }
        }
        stage('Run and Test') { 
            parallel {
                stage('Run') { 
                    steps {
                        sh 'echo "Running the Image"'
                        sh 'docker run -d -p 63306:3306 --name $TEST_CONTAINER_NAME -e MYSQL_ROOT_PASSWORD=TestPassword! cloud.canister.io:5000/kmurphs/reporting-mysql'
                    }
                }
                stage('Execute Test') { 
                    stages{
                        stage('Wait on Container Ready') { 
                            steps {
                                // sh "until docker exec mysql_temp mysqladmin ping -p$TEST_PASSSWORD | grep 'alive'; do echo 'waiting for container to become ready'; done"
                                sh "until docker exec $TEST_CONTAINER_NAME mysql -p$TEST_PASSSWORD -e 'SELECT 1;' | grep '|' | tail -1; do echo 'waiting for container to become ready'; done"
                            }
                        } 
                        stage('Test') { 
                            steps {
                                sh "./k8s_applications/jenkins/jenkins-utils/reporting-mysql-test.sh"
                            }
                        }                         
                    }
                }                
            }
        }        
    }    

    post { 
        always { 
            sh 'echo "Cleaning up the Test Container"'
            sh "./k8s_applications/jenkins/jenkins-utils/reporting-mysql-clean.sh"
        }
        success { 
            sh 'echo "Pushing image to registry"'
            // https://jenkins.io/doc/pipeline/steps/docker-workflow/
            withDockerServer([uri: "tcp://127.0.0.1:2376"]) {
                withDockerRegistry([credentialsId: 'canister-credentials', url: "https://$REGISTRY_HOST/"]) {
                    sh 'docker push ${params.REGISTRY_HOST}/$REGISTRY_CREDS_USR/${params.APP_NAME}:${params.TAG}'
                }
            }
        }
    }
}
